bundle/neocomplete/autoload/unite/sources/neocomplete.vim:67:    let &l:completefunc = 'neocomplete#complete#auto_complete'
bundle/neocomplete/doc/neocomplete.txt:416:		|complete_check()|) is disabled in completefunc.
bundle/neocomplete/doc/neocomplete.txt:584:				*g:neocomplete#force_overwrite_completefunc*
bundle/neocomplete/doc/neocomplete.txt:585:g:neocomplete#force_overwrite_completefunc
bundle/neocomplete/doc/neocomplete.txt:587:		'completefunc' option.  This variable is useful for other
bundle/neocomplete/doc/neocomplete.txt:588:		plugin overwrite 'completefunc'.  But other plugin's
bundle/neocomplete/doc/neocomplete.txt:589:		'completefunc' is disabled.
bundle/neocomplete/doc/neocomplete.txt:1632:	let g:neocomplete#force_overwrite_completefunc = 1
bundle/neocomplete/doc/neocomplete.txt:1723:Q: Conflicts completefunc with other plugins in neocomplete.
bundle/neocomplete/doc/neocomplete.txt:1725:A: You can disable the error by |g:neocomplete#force_overwrite_completefunc|
bundle/neocomplete/doc/neocomplete.txt:1927:vim-rails overwrites completefunc. So neocomplete disabled.
bundle/neocomplete/doc/neocomplete.txt:1928:You can overwrite completefunc by
bundle/neocomplete/doc/neocomplete.txt:1929:|g:neocomplete#force_overwrite_completefunc|.
bundle/neocomplete/autoload/neocomplete/mappings.vim:194:  let &l:completefunc = 'neocomplete#complete#sources_manual_complete'
bundle/neocomplete/autoload/neocomplete.vim:70:let g:neocomplete#force_overwrite_completefunc =
bundle/neocomplete/autoload/neocomplete.vim:71:      \ get(g:, 'neocomplete#force_overwrite_completefunc', 0)
bundle/neocomplete/autoload/neocomplete.vim:208:  return &l:completefunc == 'neocomplete#complete#auto_complete'
bundle/neocomplete/autoload/neocomplete.vim:211:  return &l:completefunc == 'neocomplete#complete#sources_manual_complete'
bundle/neocomplete/autoload/neocomplete/handler.vim:239:  let &l:completefunc = 'neocomplete#complete#auto_complete'
bundle/neocomplete/autoload/neocomplete/handler.vim:275:  if &l:completefunc == ''
bundle/neocomplete/autoload/neocomplete/handler.vim:276:    let &l:completefunc = 'neocomplete#complete#manual_complete'
bundle/neocomplete/autoload/neocomplete/handler.vim:279:  " Detect completefunc.
bundle/neocomplete/autoload/neocomplete/handler.vim:280:  if &l:completefunc !~# '^neocomplete#'
bundle/neocomplete/autoload/neocomplete/handler.vim:285:    if g:neocomplete#force_overwrite_completefunc
bundle/neocomplete/autoload/neocomplete/handler.vim:286:      " Set completefunc.
bundle/neocomplete/autoload/neocomplete/handler.vim:287:      let &l:completefunc = 'neocomplete#complete#manual_complete'
bundle/neocomplete/autoload/neocomplete/handler.vim:291:      99verbose setl completefunc?
bundle/neocomplete/autoload/neocomplete/handler.vim:295:            \ 'Another plugin set completefunc! Disabled neocomplete.')
bundle/neocomplete/autoload/neocomplete/complete.vim:37:      let &l:completefunc = 'neocomplete#complete#manual_complete'
bundle/neocomplete/autoload/neocomplete/init.vim:134:  " Set completefunc.
bundle/neocomplete/autoload/neocomplete/init.vim:135:  let completefunc_save = &l:completefunc
bundle/neocomplete/autoload/neocomplete/init.vim:136:  let &completefunc = 'neocomplete#complete#manual_complete'
bundle/neocomplete/autoload/neocomplete/init.vim:137:  if completefunc_save != ''
bundle/neocomplete/autoload/neocomplete/init.vim:138:    let &l:completefunc = completefunc_save
bundle/vim-ipython/README.rst:130:vim-ipython activates a 'completefunc' that queries IPython.
bundle/vim-ipython/README.rst:131:A completefunc is activated using ``Ctrl-X Ctrl-U`` in Insert Mode (vim
bundle/vim-ipython/README.rst:169:**Making completefunc local to a buffer, or disabling it**
bundle/vim-ipython/README.rst:170:By default, vim-ipython activates the custom completefunc globally.
bundle/vim-ipython/README.rst:171:Sometimes, having a completefunc breaks other plugins' completions. Putting
bundle/vim-ipython/README.rst:172:the line ``let g:ipy_completefunc = 'local'`` in one's vimrc will activate the
bundle/vim-ipython/README.rst:173:IPython-based completion only for current buffer. Setting `g:ipy_completefunc`
bundle/vim-ipython/README.rst:286:* @mrterry for activating completefunc only after a connection is made (#25),
bundle/vim-ipython/README.rst:291:* @pielgrzym for setting completefunc locally to a buffer (#32)
bundle/vim-ipython/ftplugin/python/ipy.vim:32:" Register IPython completefunc
bundle/vim-ipython/ftplugin/python/ipy.vim:37:" you can later set it using ':set completefunc=CompleteIPython', which will
bundle/vim-ipython/ftplugin/python/ipy.vim:40:if !exists('g:ipy_completefunc')
bundle/vim-ipython/ftplugin/python/ipy.vim:41:    let g:ipy_completefunc = 'global'
bundle/vim-ipython/ftplugin/python/vim_ipython.py:194:    #   let g:ipy_completefunc = 'local'
bundle/vim-ipython/ftplugin/python/vim_ipython.py:196:        if g:ipy_completefunc == 'global'
bundle/vim-ipython/ftplugin/python/vim_ipython.py:197:            set completefunc=CompleteIPython
bundle/vim-ipython/ftplugin/python/vim_ipython.py:198:        elseif g:ipy_completefunc == 'local'
bundle/vim-ipython/ftplugin/python/vim_ipython.py:199:            setl completefunc=CompleteIPython
bundle/unite.vim/autoload/unite/init.vim:161:    setlocal completefunc=unite#dummy_completefunc
bundle/unite.vim/autoload/unite.vim:306:function! unite#dummy_completefunc(findstart, base) "{{{
load/settings.vim:32:let g:neocomplete#force_overwrite_completefunc = 1
load/map/map_java.vim:7:au FileType java :setlocal completefunc=javacomplete#CompleteParamsInfo
